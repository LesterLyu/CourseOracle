# This workflow will do a clean install of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js 14
      uses: actions/setup-node@v2
      with:
        node-version: 14
        cache-dependency-path: frontend/yarn.lock
        cache: 'yarn'

    - name: Install Dependencies
      working-directory: frontend
      run: yarn install --frozen-lockfile
      
    - name: Build
      working-directory: frontend
      run: CI=false yarn build; cp build/index.html build/404.html
      
    - name: Deploy Frontend
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./frontend/build
    - name: Install SSH Key
      uses: shimataro/ssh-key-action@v2
      with:
        key: ${{ secrets.SERVER_SSH_KEY }}
        known_hosts: 'placeholder'
    - name: Add Known Hosts
      run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
    - name: Rsync into Server
      run: rsync -avz -e "ssh -i $HOME/.ssh/id_rsa" ./ root@co.lesterlyu.com:/root/co
    - name: SSH
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SSH_HOST }}
        username: root
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          cd co
          docker-compose -f ./docker-compose-prod.yaml stop
          docker-compose -f ./docker-compose-prod.yaml up -d --build
      
      
